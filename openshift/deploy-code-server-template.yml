---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: custom-code-server
  app.kubernetes.io/part-of: code-server
  app.kubernetes.io/component: ide
metadata:
  name: code-server
  labels:
    template: custom-code-server
  annotations:
    openshift.io/display-name: VS Code Server
    description: Deploy VS Code Server in OpenShift
    iconClass: icon-python
    tags: python,vscode
    openshift.io/documentation-url: "https://github.com/codekow/ocp-code-server" 
    openshift.io/support-url: "https://github.com/codekow/ocp-code-server/issues"
    template.openshift.io/bindable: "false"
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  required: true
  value: custom-code-server
- name: VOLUME_SIZE
  displayName: Volume Size
  value: 5Gi
  required: true
- name: CODE_SERVER_MEM_LIMIT
  displayName: Code Server Memory Limit
  value: 1792Mi
  required: true
  description: Consider the pod quota limits on your namespace
- name: CODE_SERVER_CPU_LIMIT
  displayName: Code Server CPU Limit
  value: 1700m
  required: true
  description: Consider the pod quota limits on your namespace
- name: WEBDAV_MEM_LIMIT
  displayName: WebDav Memory Limit
  value: 256M
  required: true
  description: Consider the pod quota limits on your namespace
- name: WEBDAV_CPU_LIMIT
  displayName: WebDav CPU Limit
  value: 300m
  required: true
  description: Consider the pod quota limits on your namespace
- name: CODE_SERVER_PASSWORD
  displayName: Code Server Password
  from: "[A-Za-z0-9]{32}"
  generate: expression
  required: true
  description: Password for Code Server
- name: CODE_SERVER_IMAGE
  description: The base image for code-server
  value: quay.io/codekow/code-server:ubi8
  required: true
- name: WEBDAV_NODE_IMAGE
  description: The base image for WebDav
  value: quay.io/codekow/webdav:latest
  required: true
objects:
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: true
    tags:
    - name: base
      from:
        kind: DockerImage
        name: ${CODE_SERVER_IMAGE}
      importPolicy:
        scheduled: true
      referencePolicy:
        type: Source
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: webdav-node
      app.kubernetes.io/name: webdav-node
    name: webdav-node
  spec:
    lookupPolicy:
      local: true
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${WEBDAV_NODE_IMAGE}
      importPolicy:
        scheduled: true
      referencePolicy:
        type: Source
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      build: custom-code-server
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: '${APPLICATION_NAME}:latest'
    runPolicy: SerialLatestOnly
    source:
      dockerfile: |
        FROM custom-code-server:base

        USER root

        # install your own customizations here
        # RUN apt-get update && \
        #     apt-get -y install --no-install-recommends awesome-tool && \
        #     rm -rf /var/lib/apt/lists/*

        USER 1001

      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: '${APPLICATION_NAME}:base'
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
      - type: ImageChange
        imageChange:
          from:
            kind: ImageStreamTag
            name: '${APPLICATION_NAME}:base'
      - type: ConfigChange
- kind: Secret
  apiVersion: v1
  type: kubernetes.io/basic-auth
  metadata:
    name: "${APPLICATION_NAME}-secret"
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
    annotations:
      openshift.io/documentation-url: https://github.com/codekow/ocp-code-server
      openshift.io/support-url: https://github.com/codekow/ocp-code-server/issues
  stringData:
    password: ${CODE_SERVER_PASSWORD}
    username: coder
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-data"
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
    annotations:
      openshift.io/documentation-url: "https://github.com/codekow/ocp-code-server" 
      openshift.io/support-url: "https://github.com/codekow/ocp-code-server/issues"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_SIZE}"
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
    annotations:
      openshift.io/documentation-url: "https://github.com/codekow/ocp-code-server" 
      openshift.io/support-url: "https://github.com/codekow/ocp-code-server/issues"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
        deployment: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deployment: ${APPLICATION_NAME}
      spec:
        containers:
          - name: custom-code-server
            image: ${APPLICATION_NAME}:latest
            imagePullPolicy: Always
            env:
              - name: PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "${APPLICATION_NAME}-secret"
            ports:
              - containerPort: 1337
                protocol: TCP
              - containerPort: 8000
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
            readinessProbe:
              failureThreshold: 2
              httpGet:
                path: /
                port: 1337
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            resources:
              limits:
                cpu: ${CODE_SERVER_CPU_LIMIT}
                memory: ${CODE_SERVER_MEM_LIMIT}
            volumeMounts:
              - mountPath: /home/coder
                name: coder-home
          - name: webdav-server
            image: webdav-node:latest
            ports:
              - containerPort: 1338
                protocol: TCP
            env:
              - name: WEBDAV_USER
                value: coder
              - name: WEBDAV_PASS
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "${APPLICATION_NAME}-secret"
              - name: WEBDAV_PATH
                value: /home/coder
              - name: WEBDAV_PORT
                value: "1338"
            resources:
              limits:
                cpu: ${WEBDAV_CPU_LIMIT}
                memory: ${WEBDAV_MEM_LIMIT}
            volumeMounts:
              - mountPath: /home/coder
                name: coder-home
        volumes:
          - name: coder-home
            persistentVolumeClaim:
              claimName: "${APPLICATION_NAME}-data"
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - custom-code-server
          from:
            kind: ImageStreamTag
            name: "${APPLICATION_NAME}:latest"
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - webdav-server
          from:
            kind: ImageStreamTag
            name: "webdav-node:latest"
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 1337-tcp
      protocol: TCP
      port: 1337
      targetPort: 1337
    - name: 8000-tcp
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: 1338-tcp
      port: 1338
      targetPort: 1338
    - name: 8050-tcp
      protocol: TCP
      port: 8050
      targetPort: 8050
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deployment: ${APPLICATION_NAME}
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
  spec:
    host: ""
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    port:
      targetPort: 1337-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}-webdav"
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/component: webdav-server
  spec:
    host: ""
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    port:
      targetPort: 1338-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}-demo"
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
  spec:
    host: ""
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
