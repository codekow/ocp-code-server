---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: custom-code-server-build-ubi
  app.kubernetes.io/part-of: code-server
  app.kubernetes.io/component: ide
metadata:
  name: custom-code-server-build-ubi
  annotations:
    openshift.io/display-name: VS Code Server
    description: Setup a build config for codercom custom code server
    iconClass: icon-python
    tags: python,vscode
    openshift.io/documentation-url: "https://github.com/codekow/ocp-code-server" 
    openshift.io/support-url: "https://github.com/codekow/ocp-code-server/issues"
    template.openshift.io/bindable: "false"
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  required: true
  value: custom-code-server
- name: BUILD_MEM_LIMIT
  displayName: Build Memory Limit
  value: 1Gi
  required: true
  description: Consider the pod quota limits
- name: BUILD_CPU_LIMIT
  displayName: Build CPU Limit
  value: 400m
  required: true
  description: Consider the pod quota limits
- name: CUSTOM_PROXY
  displayName: Proxy server
  value: ""
- name: NO_PROXY
  value: ""
- name: BUILD_DEPLOY_TOKEN_USERNAME
  description: "Username to allow cloning of private repos"
  displayName: "GIT Username"
- name: BUILD_DEPLOY_TOKEN_PASSWORD
  description: "Username to allow cloning of private repos"
  displayName: "GIT Password"
- name: CONTEXT_DIR
  description: "Build Source Files Directory"
  displayName: "Context Directory"
  value: container/base
- name: DOCKERFILE
  description: "Name of the Dockerfile / Containerfile"
  displayName: "Dockerfile Name"
  value: Dockerfile.ubi8
- name: BUILD_REF
  description: "Branch Name to build from (default: main)"
  value: main
- name: BUILD_URL
  description: "URL to git repo"
  value: "https://github.com/codekow/ocp-code-server.git"
- name: DOCKER_IMAGE_BASE
  description: "Base docker URI for building"
  value: "registry.access.redhat.com/ubi8/ubi"
- name: DOCKER_IMAGE_TAG
  description: "Base docker tag building"
  value: "latest"
objects:
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      build: ${APPLICATION_NAME}-ubi
    name: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    annotations:
      docker.io/source: "${DOCKER_IMAGE_BASE}"
    labels:
      app: ${APPLICATION_NAME}
      build: ${APPLICATION_NAME}-ubi
    name: ubi
  spec:
    lookupPolicy:
      local: false
    tags:
      - from:
          kind: DockerImage
          name: ${DOCKER_IMAGE_BASE}:${DOCKER_IMAGE_TAG}
        name: ${DOCKER_IMAGE_TAG}
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      build: ${APPLICATION_NAME}-ubi
    name: ${APPLICATION_NAME}-ubi-base
    annotations:
      app.openshift.io/vcs-ref: ${BUILD_REF}
      app.openshift.io/vcs-uri: ${BUILD_URL}
  spec:
    resources:
      limits:
        memory: ${BUILD_MEM_LIMIT}
        cpu: ${BUILD_CPU_LIMIT}
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:ubi-base
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        uri: ${BUILD_URL}
        ref: ${BUILD_REF}
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: ${DOCKERFILE}
        from:
          kind: ImageStreamTag
          name: "ubi:${DOCKER_IMAGE_TAG}"
      type: Docker
    triggers:
    - type: ConfigChange
    - type: ImageChange
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      build: ${APPLICATION_NAME}-ubi
    name: ${APPLICATION_NAME}-ubi-patch
  spec:
    runPolicy: SerialLatestOnly
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:ubi-base
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    triggers:
      - imageChange:
        type: ImageChange
      - type: ConfigChange
    source:
      type: dockerfile
      dockerfile: |
        FROM scratch

        USER root

        # install your own customizations here
        # RUN dnf update -y && \
        #     dnf -y install awesome-tool && \
        #     dnf clean all
        
        USER 1001
  status:
    lastVersion: 1336